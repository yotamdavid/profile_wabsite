pipeline {
    agent any
    
    stages {
        stage('Clean Up') {
            steps {
                // Clean Up Project Files And Clone Git - To Update The Project
                sh 'rm -rf ferari_docker/'
                sh 'git clone https://github.com/yotamdavid/ferari_docker.git'
                dir('ferari_docker/web_project/') {
                    // Deletes Previous Docker Images
                    sh 'docker rmi -f yotamdavid/app_ferari:latest'
                }
            }
        }

        stage('Build And Push The Image To Docker Hub') {
            steps {
                dir('ferari_docker/web_project') {
                    // Creates Docker Image
                    sh "docker build -t yotamdavid/app_ferari:1.${BUILD_NUMBER} -t yotamdavid/app_ferari:latest ."
                }
                // Pushes Docker Image To Docker Hub
                sh 'docker push yotamdavid/app_ferari:1.${BUILD_NUMBER}'
                sh 'docker push yotamdavid/app_ferari:latest'

                // Cleanup old Docker images
                sh "docker image ls --format '{{.ID}}' yotamdavid/app_ferari --filter 'dangling=false' | sort -r | awk 'NR>4' | xargs -I {} docker image rm -f {}"            
            }
        }

        stage('Creating a Cluster') {
            steps {
                // Runs tests from the main machine on the website
                dir('ferari_docker/web_project') {
                    sh 'rm -rf terraform'
                    sh 'git clone https://github.com/yotamdavid/terraform.git'
                    dir('terraform') {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Running k8s On Test Server') {
            steps {
                // Runs tests from the main machine on the website
                sh 'gcloud container clusters get-credentials test-cluster --project golden-system-393111 --region us-central1'
                sh 'rm -rf k8s_project'
                sh 'git clone https://github.com/yotamdavid/k8s_project.git'
                dir('k8s_project') {
                    sh 'kubectl apply -f db-deploy.yml'
                    sh 'kubectl apply -f db-service.yml'
                    sh 'kubectl apply -f app_deployment.yaml'
                    sh 'kubectl apply -f app_service.yaml '
                    sh 'chmod +x update_db.sh'
                    sh './update_db.sh'
                    sh 'chmod +x test.sh'
                    sh './test.sh'
                    sh 'kubectl delete pods --all'
                    sh 'kubectl delete services --all'
                    sh 'kubectl delete deployments --all'
                }
            }
        }
        
        stage('Destroy Test Server') {
            steps {
                dir('ferari_docker/web_project/terraform') {
                    sh 'terraform init'
                    sh 'terraform destroy -auto-approve'
                }
            }
        }

        stage('Running k8s On Prod Server') {
            steps {
                // Runs tests from the main machine on the website
                sh 'gcloud container clusters get-credentials ferari-web2 --project golden-system-393111 --region us-east1-b'
                dir('k8s_project') {
                    sh 'kubectl apply -f db-deploy.yml'
                    sh 'kubectl apply -f db-service.yml'
                    sh 'kubectl apply -f app_deployment.yaml'
                    sh 'kubectl apply -f app_service.yaml '
                    sh 'chmod +x update_db.sh'
                    sh './update_db.sh'
                }
            }
        }
        stage('set a monitoring grafana') {
            steps {
                sh 'gcloud container clusters get-credentials ferari-web2 --project golden-system-393111 --region us-east1-b'
                sh 'kubectl create namespace monitoring'
                sh 'helm repo add prometheus-community https://prometheus-community.github.io/helm-charts'
                sh 'helm repo update'
                sh 'helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring'
                sh 'kubectl get pods -n monitoring'
                sh 'kubectl get svc -n monitoring'
                sh 'nohup kubectl port-forward svc/prometheus-kube-prometheus-prometheus -n monitoring 9090 &'
                sh 'echo "now edit the grafana service from ClusterIP to LoadBalancer"'
                sh 'echo "The monitor has been set up successfully"'

            }
        }
    }
}
